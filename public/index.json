
    
    
    
    
    
    
    
    
    [{"authors":["admin"],"categories":null,"content":"I am a Ph.D. candidate in the Computer Science and Engineering Department at the University of California, San Diego. I am fortunate to be advised by Prof. Nadia Polikarpova, and be a member of Programming Systems group.\nI am interested in using Programming Languages techniques to automate programming tasks. Currently, my focus is on program synthesis tools, which generate programs from high-level specifications. My goal is to enable the synthesis to scale to real-world tasks and to infer human intentions from limited information.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://aaronguo1996.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a Ph.D. candidate in the Computer Science and Engineering Department at the University of California, San Diego. I am fortunate to be advised by Prof. Nadia Polikarpova, and be a member of Programming Systems group.\nI am interested in using Programming Languages techniques to automate programming tasks. Currently, my focus is on program synthesis tools, which generate programs from high-level specifications. My goal is to enable the synthesis to scale to real-world tasks and to infer human intentions from limited information.","tags":null,"title":"","type":"authors"},{"authors":["James Koppel","Zheng Guo","Edsko de Vries","Armando Solar-Lezama","Nadia Polikarpova"],"categories":[],"content":"","date":1662854400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1662854400,"objectID":"0345e54563f1a10f9636d2017a6bbcc3","permalink":"https://aaronguo1996.github.io/publication/ecta/","publishdate":"2022-09-11T00:00:00Z","relpermalink":"/publication/ecta/","section":"publication","summary":"Many problem domains, including program synthesis and rewrite-based optimization, require searching astronomically large spaces of programs. Existing approaches often rely on building specialized data structures—version-space algebras, finite tree automata, or e-graphs—to compactly represent such spaces. At their core, all these data structures exploit independence of subterms; as a result, they cannot efficiently represent more complex program spaces, where the choices of subterms are entangled.\nWe introduce equality-constrained tree automata (ECTAs), a new data structure, designed to compactly represent large spaces of programs with entangled subterms. We present efficient algorithms for extracting programs from ECTAs, implemented in a performant Haskell library, ecta. Using the ecta library, we construct Hectare, a type-driven program synthesizer for Haskell. Hectare significantly outperforms a state-of-the-art synthesizer Hoogle+ — providing an average speedup of 8x — despite its implementation being an order of magnitude smaller.","tags":[],"title":"Searching Entangled Program Spaces","type":"publication"},{"authors":["Zheng Guo","David Cao","Davin Tjong","Jean Yang","Cole Schlesinger","Nadia Polikarpova"],"categories":[],"content":"","date":1655251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655251200,"objectID":"61a936c3d44ce24f8304f8a49493b012","permalink":"https://aaronguo1996.github.io/publication/apiphany/","publishdate":"2022-05-23T00:00:00Z","relpermalink":"/publication/apiphany/","section":"publication","summary":"With the rise of software-as-a-service and microservice architectures, RESTful APIs are now ubiquitous in mobile and web applications. A service can have tens or hundreds of API methods, making it a challenge for programmers to find the right combination of methods to solve their task. We present APIphany, a component-based synthesizer for programs that compose calls to RESTful APIs. The main innovation behind APIphany is the use of precise semantic types, both to specify user intent and to direct the search. APIphany contributes three novel mechanisms to overcome challenges in adapting component-based synthesis to the REST domain: (1) a type inference algorithm for augmenting REST specifications with semantic types; (2) an efficient synthesis technique for \"wrangling\" semi-structured data, which is commonly required in working with RESTful APIs; and (3) a new form of simulated execution to avoid executing APIs calls during synthesis. We evaluate APIphany on three real-world APIs and 32 tasks extracted from GitHub repositories and StackOverflow. In our experiments, APIphany found correct solutions to 29 tasks, with 23 of them reported among top ten synthesis results.","tags":[],"title":"Type-Directed Program Synthesis for RESTful APIs","type":"publication"},{"authors":[],"categories":[],"content":"","date":1653432879,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653432879,"objectID":"0338c95c8a9091e745c173bc98a79111","permalink":"https://aaronguo1996.github.io/project/apiphany/","publishdate":"2022-05-24T15:54:39-07:00","relpermalink":"/project/apiphany/","section":"project","summary":"A type-directed program synthesizer for REST APIs. It uses semantic types to specify user intent and to direct the search.","tags":[],"title":"APIphany","type":"project"},{"authors":["Michael B. James","Zheng Guo","Ziteng Wang","Shivani Doshi","Hila Peleg","Ranjit Jhala","Nadia Polikarpova"],"categories":[],"content":"","date":1589585597,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589585597,"objectID":"896e77aeb37df1bf949b5f72f4061c48","permalink":"https://aaronguo1996.github.io/publication/hplus/","publishdate":"2020-05-15T15:33:17-08:00","relpermalink":"/publication/hplus/","section":"publication","summary":"We present Hoogle+, a web-based API discovery tool for Haskell. A Hoogle+ user can specify a programming task using either a type, a set of input-output tests, or both. Given a specification, the tool returns a list of matching programs composed from functions in popular Haskell libraries, and annotated with automatically-generated examples of their behavior. These features of Hoogle+ are powered by three novel techniques. First, to enable efficient type-directed synthesis from tests only, we develop an algorithm that infers likely type specifications from tests. Second, to return high-quality programs even with ambiguous specifications, we develop a technique that automatically eliminates meaningless and repetitive synthesis results. Finally, we show how to extend this elimination technique to automatically generate informative inputs that can be used to demonstrate program behavior to the user. To evaluate the effectiveness of Hoogle+ compared with traditional API search techniques, we perform a user study with 30 participants of varying Haskell proficiency. The study shows that programmers equipped with Hoogle+ generally solve tasks faster and were able to solve 50% more tasks overall.","tags":[],"title":"Digging for Fold: Synthesis-Aided API Discovery for Haskell","type":"publication"},{"authors":[],"categories":[],"content":"","date":1580176288,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580176288,"objectID":"56f5fac924ef0aa4e4433e0796d2519b","permalink":"https://aaronguo1996.github.io/project/hoogleplus/","publishdate":"2020-01-27T17:51:28-08:00","relpermalink":"/project/hoogleplus/","section":"project","summary":"A type-driven synthesis engine for Haskell. It supports features like polymorphism, type classes, higher-order functions, etc.","tags":[],"title":"Hoogle+","type":"project"},{"authors":["Zheng Guo","Micheal James","David Justo","Jiaxiao Zhou","Ziteng Wang","Ranjit Jhala","Nadia Polikarpova"],"categories":[],"content":"","date":1580167997,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580167997,"objectID":"b39e7586d9dbd305018f4daae56679fc","permalink":"https://aaronguo1996.github.io/publication/tygar/","publishdate":"2020-01-27T15:33:17-08:00","relpermalink":"/publication/tygar/","section":"publication","summary":"We consider the problem of type-directed component-based synthesis where, given a set of (typed) components and a query _type_, the goal is to synthesize a term that inhabits the query. Classical approaches based on proof search in intuitionistic logics do not scale up to the standard libraries of modern languages, which span hundreds or thousands of components. Recent graph reachability based methods proposed for Java do scale, but only apply to monomorphic data and components: polymorphic data and components infinitely explode the size of the graph that must be searched, rendering synthesis intractable. We introduce _type-guided abstraction refinement_ (TYGAR), a new approach for scalable type-directed synthesis over polymorphic datatypes and components. Our key insight is that we can overcome the explosion by building a graph over abstract types which represent a potentially unbounded set of concrete types. We show how to use graph reachability to search for candidate terms over abstract types, and introduce a new algorithm that uses _proofs of untypeability_ of ill-typed candidates to iteratively _refine_ the abstraction until a well-typed result is found. We have implemented TYGAR in H+, a tool that takes as input a set of Haskell libraries and a query type, and returns a Haskell term that uses functions from the provided libraries to implement the query type. Our support for polymorphism allows H+ to work with higher-order functions and type classes, and enables more precise queries due to parametricity. We have evaluated H+ on 44 queries using a set of popular Haskell libraries with a total of 291 components. H+ returns an interesting solution within the first five results for 32 out of 44 queries. Our results show that TYGAR allows H+ to rapidly return well-typed terms, with the median time to first solution of just 1.4 seconds. Moreover, we observe that gains from iterative refinement over exhaustive enumeration are more pronounced on harder queries.","tags":[],"title":"Program Synthesis by Type-Guided Abstraction Refinement","type":"publication"},{"authors":[],"categories":null,"content":"","date":1579722300,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579722300,"objectID":"4ca4d24a2abf5668c50182e4d4632358","permalink":"https://aaronguo1996.github.io/talk/apiphany/","publishdate":"2020-01-27T18:59:04-08:00","relpermalink":"/talk/apiphany/","section":"talk","summary":"","tags":[],"title":"APIphany: Type-Directed Program Synthesis for RESTful APIs","type":"talk"},{"authors":[],"categories":null,"content":"","date":1579722300,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1579722300,"objectID":"8cbe1047001b0e448cc06e652b2b42da","permalink":"https://aaronguo1996.github.io/talk/tygar/","publishdate":"2020-01-27T18:59:04-08:00","relpermalink":"/talk/tygar/","section":"talk","summary":"","tags":[],"title":"Hoogle+: Program Synthesis by Type-Guided Abstraction Refinement","type":"talk"}]